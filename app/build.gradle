apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'deploygate'
def AAVersion = '3.0.1'
def SpringVersion = '1.0.1.RELEASE'

android {
    // Error:duplicate files during packaging of APK /XXX/app-debug-unaligned.apk 対策
    packagingOptions {
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
    }

    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "hm.orz.chaos114.android.tumekyouen"
        minSdkVersion 12
        targetSdkVersion 19
        versionCode 18
        versionName "0.10.0"
    }
    buildTypes {
        release {
            runProguard false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:19.0.+'
    compile 'com.android.support:appcompat-v7:19.+'
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"

    // AdMob
    compile 'com.google.android.gms:play-services:4.0.30'
    // spring for android
    compile "org.springframework.android:spring-android-core:$SpringVersion"
    compile "org.springframework.android:spring-android-rest-template:$SpringVersion"
    // deploygate
    compile 'com.deploygate:sdk:3.1'
}
apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName 'hm.orz.chaos114.android.tumekyouen'
    }
}

deploygate {
    userName = "$System.env.DEPLOYGATE_USER"
    token = "$System.env.DEPLOYGATE_TOKEN"

    apks {
        debug {
            sourceFile = file("${project.buildDir}/outputs/apk/app-debug-unaligned.apk")
        }
    }
}

uploadDeployGateDebug.dependsOn assembleDebug

task secretKeyReplace {
    description 'Replace secret keys from system environment.'
    doLast {
        def filePath = "app/src/main/res/values/secret_strings.xml"
        def br = new BufferedReader(new FileReader(filePath))
        def lines = br.readLines()
        br.close()

        // key情報の抽出
        def secretKeys = new HashSet()
        def rExpression = /INPUT_YOUR_([A-Z_]+)/
        for (String line : lines) {
            if (line.contains("INPUT_YOUR_")) {
                def matcher = (line =~ rExpression)
                secretKeys << matcher[0][1]
            }
        }

        // 文字列の置換
        def newLines = new ArrayList<String>()
        for (String line : lines) {
            String newLine = line
            for (String key : secretKeys) {
                if (!System.getenv()[key]) {
                    continue
                }
                newLine.replace("INPUT_YOUR_" + key, System.getenv()[key])
            }
            newLines << newLine
        }

        def pw = new PrintWriter(new BufferedWriter(new FileWriter(filePath)))
        for (def line : newLines) {
            pw.println(line)
        }
        pw.close()
    }
}

preBuild.dependsOn secretKeyReplace
